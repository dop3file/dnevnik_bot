import logging
import random
import sqlite3

from aiogram import *
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, \
                          InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import hlink

import config
from database import Database

bot = Bot(token=config.API_TOKEN,parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot,storage=MemoryStorage())


db = Database('db.db')

@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
	if not db.user_exists(message.from_user.id):
		button_student = KeyboardButton('–£—á–µ–Ω–∏–∫üë®‚Äçüéì') 
		button_teacher = KeyboardButton('–£—á–∏—Ç–µ–ª—åüë©‚Äçüè´')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_student, button_teacher)

		await message.answer(f'–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç {config.NAME_PROJECT}\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏, —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è, –¥–µ–ª–∏—Ç—å—Å—è –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º –∏ –µ—â—ë –º–Ω–æ–≥–æ —á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ\n\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—Å—å—è, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è‚¨áÔ∏è',reply_markup=menu)
	else:
		await profile(message)

@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message):
	await message.answer('–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: \n/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')

class CreateProfile(StatesGroup):
	name = State()
	surname = State()
	city = State()
	school_id = State()
	class_id = State()
	all_info = State()
	finish_ = State()

@dp.message_handler(lambda message: message.text == '–£—á–µ–Ω–∏–∫üë®‚Äçüéì', state='*')
async def student_registration(message):
	if db.user_exists(message.from_user.id):
		await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
	else:
		button_exit = KeyboardButton('–í—ã–π—Ç–∏') 

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_exit)


		await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',reply_markup=menu)
		await CreateProfile.name.set()

@dp.message_handler(state=CreateProfile.name)
async def create_profile_name(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message, state)
		await state.finish()
	else:
		await state.update_data(profile_name=message.text.title())
		await message.reply(message.text.title() + ',–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
		await CreateProfile.city.set()

@dp.message_handler(state=CreateProfile.city)
async def create_profile_city(message: types.Message, state: FSMContext):
	await state.update_data(profile_surname=message.text.title())
	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥')
	await CreateProfile.next()

@dp.message_handler(state=CreateProfile.school_id)
async def create_profile_school(message: types.Message, state: FSMContext):
	await state.update_data(profile_city=message.text.title())
	user_data = await state.get_data()
	
	all_schools = ''
	for school in db.get_all_schools(user_data["profile_city"]):
		school = [str(i) for i in school]
		all_schools += ' | '.join(school)
		all_schools += '\n'
	if all_schools == '':
		await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —à–∫–æ–ª')
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
		await CreateProfile.school_id.set()
	else:
		await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞\n\n{all_schools}')
		await CreateProfile.next()

@dp.message_handler(state=CreateProfile.class_id)
async def create_profile_class(message: types.Message, state: FSMContext):
	try:
		db.get_school(int(message.text))

		await state.update_data(profile_school_id=message.text)
		user_data = await state.get_data()

		all_class = ''
		for classes in db.get_all_class(user_data["profile_school_id"]):
			classes = [str(i) for i in classes]
			all_class += f'{classes[0]} | {classes[1] + classes[2]}\n'

		await message.answer(f'–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞\n\n{all_class}')
		await CreateProfile.next()

	except IndexError:
		await message.answer(f'–®–∫–æ–ª—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		await student_registration(message)

@dp.message_handler(state=CreateProfile.all_info)
async def create_profile_all_info(message: types.Message, state: FSMContext):
	button_accept = KeyboardButton('–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ') 
	button_decline = KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå')
	button_exit = KeyboardButton('–í—ã–π—Ç–∏')

	menu = ReplyKeyboardMarkup(one_time_keyboard=True)
	menu.add(button_accept, button_decline, button_exit)

	await state.update_data(profile_class_id=message.text)
	user_data = await state.get_data()
	all_info = f"–ò–º—è - {user_data['profile_name']}\n–§–∞–º–∏–ª–∏—è - {user_data['profile_surname']}\n–ì–æ—Ä–æ–¥ - {user_data['profile_city']}\n–®–∫–æ–ª–∞ - {db.get_school(user_data['profile_school_id'])[1]}\n–ö–ª–∞—Å—Å - {db.get_class(user_data['profile_class_id'])[1]}"
	await message.answer(f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ: \n{all_info}',reply_markup=menu)
	await CreateProfile.next()

@dp.message_handler(state=CreateProfile.finish_)
async def create_profile_finish(message: types.Message, state: FSMContext):
	if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå':
		await state.finish()
		await student_registration(message)

	elif message.text == '–í—ã–π—Ç–∏':
		await start(message)
		await state.finish()

	else:
		user_data = await state.get_data()
		db.add_user(user_data['profile_name'], user_data['profile_surname'], 
				user_data['profile_city'], user_data['profile_school_id'], message.from_user.id, user_data['profile_class_id'], True, False, None)
	
		await state.finish()
		await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤–∞—à–µ–º—É —É—á–∏—Ç–µ–ª—é')

@dp.message_handler(lambda message: message.text == '–£—á–∏—Ç–µ–ª—åüë©‚Äçüè´', state='*')
async def teacher_registration(message):
	if db.user_exists(message.from_user.id):
		await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
	else:
		button_exit = KeyboardButton('–í—ã–π—Ç–∏') 

		menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
		menu.add(button_exit)


		await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∫–æ–¥',reply_markup=menu)
		await CreateProfileTeacher.code.set()

class CreateProfileTeacher(StatesGroup):
	code = State()
	name = State()
	surname = State()
	patronymic = State()
	city = State()
	finish_ = State()	

@dp.message_handler(state=CreateProfileTeacher.code)
async def create_profile_teacher_code(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await exit(message, state)
	else:
		if db.check_moderation_code(message.text):
			await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–í–∞—à –∫–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
			await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ')
			await CreateProfileTeacher.next()
		else:
			await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
			await CreateProfileTeacher.code.set()

@dp.message_handler(state=CreateProfileTeacher.name)
async def create_profile_teacher_name(message: types.Message, state: FSMContext):
	await state.update_data(profile_name=message.text.title())
	await message.reply(message.text.title() + ',–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.surname)
async def create_profile_teacher_name(message: types.Message, state: FSMContext):
	await state.update_data(profile_surname=message.text.title())
	await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ')
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.patronymic)
async def create_profile_teacher_city(message: types.Message, state: FSMContext):
	await state.update_data(profile_patronymic=message.text.title())
	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥')
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.city)
async def create_profile_all_info(message: types.Message, state: FSMContext):
	await state.update_data(profile_city=message.text.title())

	button_accept = KeyboardButton('–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ') 
	button_decline = KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå')
	button_exit = KeyboardButton('–í—ã–π—Ç–∏')

	menu = ReplyKeyboardMarkup(one_time_keyboard=True)
	menu.add(button_accept, button_decline, button_exit)

	await state.update_data(profile_class_id=message.text)
	user_data = await state.get_data()
	all_info = f"–ò–º—è - {user_data['profile_name']}\n–§–∞–º–∏–ª–∏—è - {user_data['profile_surname']}\n–û—Ç—á–µ—Å—Ç–≤–æ - {user_data['profile_patronymic']}\n–ì–æ—Ä–æ–¥ - {user_data['profile_city']}"
	await message.answer(f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ: \n{all_info}',reply_markup=menu)
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.finish_)
async def create_profile_finish(message: types.Message, state: FSMContext):
	if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå':
		await state.finish()
		await teacher_registration(message)
	elif message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await start(message)
	else:
		user_data = await state.get_data()
		db.add_user(user_data['profile_name'], user_data['profile_surname'], 
				user_data['profile_city'], None, message.from_user.id, None, True, True, user_data['profile_patronymic'])
	
		await state.finish()
		await message.answer('–ü—Ä–µ–∫–∞—Ä—Å–Ω–æ!\n–í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n')
		await profile(message)

@dp.message_handler(commands=['profile'],state='*')
async def profile(message: types.Message):
	try:
		if not db.user_type(message.from_user.id):
			await message.answer('–ü—Ä–∏–≤–µ—Ç —É—á–µ–Ω–∏–∫!')
		elif db.user_type(message.from_user.id):
			button_school = KeyboardButton('–®–∫–æ–ª–∞üè´') 
			button_marks = KeyboardButton('–û—Ü–µ–Ω–∫–∏üìö')
			button_homework = KeyboardButton('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏—èüìù')
			button_timetable = KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
			button_best_students = KeyboardButton('–¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤‚≠êÔ∏è')

			menu = ReplyKeyboardMarkup()
			menu.add(button_school, button_marks, button_homework, button_timetable, button_best_students)

			await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {db.get_all_info_user(message.from_user.id)[1]} {db.get_all_info_user(message.from_user.id)[9]}!\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç {config.NAME_PROJECT}\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–∞–º, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
				,reply_markup=menu)
		else:
			await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
	except IndexError as e:
		print(e)
		await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')

@dp.message_handler(lambda message: message.text == '–®–∫–æ–ª–∞üè´', state='*')
async def schools(message: types.Message):
	if db.user_type(message.from_user.id):
		if db.get_all_info_user(message.from_user.id)[4] == None:
			button_choose_school = KeyboardButton('–í—ã–±—Ä–∞—Ç—å —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ')
			button_add_school = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —à–∫–æ–ª—É‚úÖ')
			button_exit = KeyboardButton('–í—ã–π—Ç–∏')

			menu = ReplyKeyboardMarkup(one_time_keyboard=True)
			menu.add(button_add_school, button_choose_school,button_exit)

			await message.answer('–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É',reply_markup=menu)
		else: 
			button_choose_class = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∞—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ')
			button_add_class = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å‚úÖ')
			button_exit = KeyboardButton('–í—ã–π—Ç–∏')

			menu = ReplyKeyboardMarkup(one_time_keyboard=True)
			menu.add(button_add_class, button_choose_class,button_exit)

			await message.answer('–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å',reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

class CreateSchool(StatesGroup):
	name = State()

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —à–∫–æ–ª—É‚úÖ', state='*')
async def add_school(message: types.Message):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	elif db.user_type(message.from_user.id):
		if db.get_all_info_user(message.from_user.id)[4] == None:
			await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: ')
			await CreateSchool.name.set()
		else:
			await message.answer('–£ –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —à–∫–æ–ª–∞')
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=CreateSchool.name)
async def name_school(message: types.Message, state: FSMContext):
	await state.update_data(name=message.text)
	user_data = await state.get_data()
	count_schools = db.get_count_schools()

	db.add_school(user_data['name'],db.get_all_info_user(message.from_user.id)[3])

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–í–∞—à–∞ —à–∫–æ–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ')
	db.edit_school_id(message.from_user.id, count_schools + 1)
	await state.finish()
	await schools(message)

class ChooseSchool(StatesGroup):
	id_ = State()

@dp.message_handler(lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ', state='*')
async def choose_school(message: types.Message):
	if db.user_type(message.from_user.id):
		if db.get_all_info_user(message.from_user.id)[4] == None:
			all_schools = ''
			for school in db.get_all_schools(db.get_all_info_user(message.from_user.id)[3]):
				school = [str(i) for i in school]
				all_schools += ' | '.join(school)
				all_schools += '\n'
			if all_schools == '':
				await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —à–∫–æ–ª')
				await schools(message)
			else:
				await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞\n\n{all_schools}')
				await ChooseSchool.id_.set()
		else:
			await message.answer('–£ –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —à–∫–æ–ª–∞')
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=ChooseSchool.id_)
async def id_school(message: types.Message, state: FSMContext):
	await state.update_data(id=message.text)
	user_data = await state.get_data()

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–í–∞—à–∞ —à–∫–æ–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ')
	db.edit_school_id(message.from_user.id, int(user_data['id']))
	await state.finish()
	await schools(message)

class CreateClass(StatesGroup):
	number = State()
	title = State()

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å‚úÖ', state='*')
async def add_class(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞: ')
		await CreateClass.number.set()	
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=CreateClass.number)
async def number_class(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	await state.update_data(number=int(message.text))

	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞: ')
	await CreateClass.next()

@dp.message_handler(state=CreateClass.title)
async def title_class(message: types.Message, state: FSMContext):
	await state.update_data(title=message.text)
	user_data = await state.get_data()

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω')
	db.add_class(user_data['title'], db.get_all_info_user(message.from_user.id)[4], user_data['number'])
	await state.finish()

class ChooseClass(StatesGroup):
	id_class = State()
	id_member = State()

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∞—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ', state='*')
async def choose_class(message: types.Message):
	if db.user_type(message.from_user.id):
		all_class = ''
		for classes in db.get_all_class(db.get_all_info_user(message.from_user.id)[4]):
			classes = [str(i) for i in classes]
			all_class += f'{classes[0]} | {classes[1] + classes[2]}\n'

		await message.answer(f'<b><i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:</i></b> \n\n{all_class}')
		await ChooseClass.id_class.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=ChooseClass.id_class)
async def choose_id_class(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)

	await state.update_data(id_class=int(message.text))
	user_data = await state.get_data()

	all_members_class = ''
	all_members_class_db = db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])
	for count,members in enumerate(all_members_class_db):
		member = [str(i) for i in members]
		all_members_class += f'{count + 1} | {member[2] + " " + member[1]}\n'

	await message.answer(f'<b><i>–£—á–µ–Ω–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞</i></b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ - {len(all_members_class_db)}\n\n{all_members_class}')
	await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–≤—à–µ–≥–æ –≤–∞—Å —É—á–µ–Ω–∏–∫–∞:')

	await ChooseClass.next()

@dp.message_handler(state=ChooseClass.id_member)
async def choose_id_member(message: types.Message, state: FSMContext):
	try:
		if message.text == '–í—ã–π—Ç–∏':
			await exit(message,state)
		else:
			await state.update_data(id_member=int(message.text))
			user_data = await state.get_data()
			
			info_user = db.get_all_info_user(db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])[user_data['id_member'] - 1][5])

			await message.answer(f'–ò–º—è - {info_user[1]}\n–§–∞–º–∏–ª–∏—è - {info_user[2]}')
	except IndexError:
		await message.answer('–£—á–µ–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ')

@dp.message_handler(commands=['exit'],state='*')
async def exit(message: types.Message, state: FSMContext):
	await state.finish()
	await start(message)

@dp.message_handler(lambda message: message.text == '–í—ã–π—Ç–∏',state='*')
async def exit_text(message: types.Message, state: FSMContext):
	await state.finish()
	await start(message)

@dp.message_handler()
async def any_command(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–º–æ–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'''
	await message.answer('–•–º, –Ω–µ–∑–Ω–∞—é —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å\n–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /help')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
