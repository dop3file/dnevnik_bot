import logging
import random
import sqlite3
from datetime import datetime, timedelta, date
import locale
import os

from aiogram import *
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.exceptions import ChatNotFound 
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, \
                          InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import hlink

import config
from database import Database
import sys_func
import timetable_pic as pic

locale.setlocale(locale.LC_ALL, "") 

bot = Bot(token=config.API_TOKEN,parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot,storage=MemoryStorage())


db = Database('db.db')

@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message):
	if not db.user_exists(message.from_user.id):
		button_student = KeyboardButton('–£—á–µ–Ω–∏–∫üë®‚Äçüéì') 
		button_teacher = KeyboardButton('–£—á–∏—Ç–µ–ª—åüë©‚Äçüè´')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_student, button_teacher)

		await message.answer(f'–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç {config.NAME_PROJECT}\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏, —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—è, –¥–µ–ª–∏—Ç—å—Å—è –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º –∏ –µ—â—ë –º–Ω–æ–≥–æ —á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ\n\n–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—Å—å—è, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è‚¨áÔ∏è',reply_markup=menu)
	else:
		await profile(message)

@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message):
	await message.answer('–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: \n/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å')

class CreateProfile(StatesGroup):
	name = State()
	surname = State()
	city = State()
	school_id = State()
	class_id = State()
	all_info = State()
	finish_ = State()

@dp.message_handler(lambda message: message.text == '–£—á–µ–Ω–∏–∫üë®‚Äçüéì', state='*')
async def student_registration(message):
	if db.user_exists(message.from_user.id):
		await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
	else:
		button_exit = KeyboardButton('–í—ã–π—Ç–∏') 

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_exit)


		await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',reply_markup=menu)
		await CreateProfile.name.set()

@dp.message_handler(state=CreateProfile.name)
async def create_profile_name(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message, state)
		await state.finish()
	else:
		await state.update_data(profile_name=message.text.title())
		await message.reply(message.text.title() + ',–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
		await CreateProfile.city.set()

@dp.message_handler(state=CreateProfile.city)
async def create_profile_city(message: types.Message, state: FSMContext):
	await state.update_data(profile_surname=message.text.title())
	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥')
	await CreateProfile.next()

@dp.message_handler(state=CreateProfile.school_id)
async def create_profile_school(message: types.Message, state: FSMContext):
	await state.update_data(profile_city=message.text.title())
	user_data = await state.get_data()
	
	all_schools = ''
	for school in db.get_all_schools(user_data["profile_city"]):
		school = [str(i) for i in school]
		all_schools += ' | '.join(school)
		all_schools += '\n'
	if all_schools == '':
		await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —à–∫–æ–ª')
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑')
		await CreateProfile.school_id.set()
	else:
		await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞\n\n{all_schools}')
		await CreateProfile.next()

@dp.message_handler(state=CreateProfile.class_id)
async def create_profile_class(message: types.Message, state: FSMContext):
	try:
		db.get_school(int(message.text))

		await state.update_data(profile_school_id=message.text)
		user_data = await state.get_data()

		all_class = ''
		for classes in db.get_all_class(user_data["profile_school_id"]):
			classes = [str(i) for i in classes]
			all_class += f'{classes[0]} | {classes[1] + classes[2]}\n'

		await message.answer(f'–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞\n\n{all_class}')
		await CreateProfile.next()

	except IndexError:
		await message.answer(f'–®–∫–æ–ª—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		await student_registration(message)

@dp.message_handler(state=CreateProfile.all_info)
async def create_profile_all_info(message: types.Message, state: FSMContext):
	button_accept = KeyboardButton('–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ') 
	button_decline = KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå')
	button_exit = KeyboardButton('–í—ã–π—Ç–∏')

	menu = ReplyKeyboardMarkup(one_time_keyboard=True)
	menu.add(button_accept, button_decline, button_exit)

	await state.update_data(profile_class_id=message.text)
	user_data = await state.get_data()
	all_info = f"–ò–º—è - {user_data['profile_name']}\n–§–∞–º–∏–ª–∏—è - {user_data['profile_surname']}\n–ì–æ—Ä–æ–¥ - {user_data['profile_city']}\n–®–∫–æ–ª–∞ - {db.get_school(user_data['profile_school_id'])[1]}\n–ö–ª–∞—Å—Å - {db.get_class(user_data['profile_class_id'])[1]}"
	await message.answer(f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ: \n{all_info}',reply_markup=menu)
	await CreateProfile.next()

@dp.message_handler(state=CreateProfile.finish_)
async def create_profile_finish(message: types.Message, state: FSMContext):
	if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå':
		await state.finish()
		await student_registration(message)

	elif message.text == '–í—ã–π—Ç–∏':
		await start(message)
		await state.finish()

	else:
		user_data = await state.get_data()
		db.add_user(user_data['profile_name'], user_data['profile_surname'], 
				user_data['profile_city'], user_data['profile_school_id'], message.from_user.id, user_data['profile_class_id'], False, False, None)
	
		await state.finish()
		await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –≤–∞—à–µ–º—É —É—á–∏—Ç–µ–ª—é')

@dp.message_handler(lambda message: message.text == '–£—á–∏—Ç–µ–ª—åüë©‚Äçüè´', state='*')
async def teacher_registration(message):
	if db.user_exists(message.from_user.id):
		await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
	else:
		button_exit = KeyboardButton('–í—ã–π—Ç–∏') 

		menu = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
		menu.add(button_exit)


		await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∫–æ–¥',reply_markup=menu)
		await CreateProfileTeacher.code.set()

class CreateProfileTeacher(StatesGroup):
	code = State()
	name = State()
	surname = State()
	patronymic = State()
	city = State()
	finish_ = State()	

@dp.message_handler(state=CreateProfileTeacher.code)
async def create_profile_teacher_code(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await exit(message, state)
	else:
		if db.check_moderation_code(message.text):
			await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–í–∞—à –∫–æ–¥ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
			await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ')
			await CreateProfileTeacher.next()
		else:
			await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
			await CreateProfileTeacher.code.set()

@dp.message_handler(state=CreateProfileTeacher.name)
async def create_profile_teacher_name(message: types.Message, state: FSMContext):
	await state.update_data(profile_name=message.text.title())
	await message.reply(message.text.title() + ',–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.surname)
async def create_profile_teacher_name(message: types.Message, state: FSMContext):
	await state.update_data(profile_surname=message.text.title())
	await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ')
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.patronymic)
async def create_profile_teacher_city(message: types.Message, state: FSMContext):
	await state.update_data(profile_patronymic=message.text.title())
	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥')
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.city)
async def create_profile_all_info(message: types.Message, state: FSMContext):
	await state.update_data(profile_city=message.text.title())

	button_accept = KeyboardButton('–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ') 
	button_decline = KeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå')
	button_exit = KeyboardButton('–í—ã–π—Ç–∏')

	menu = ReplyKeyboardMarkup(one_time_keyboard=True)
	menu.add(button_accept, button_decline, button_exit)

	await state.update_data(profile_class_id=message.text)
	user_data = await state.get_data()
	all_info = f"–ò–º—è - {user_data['profile_name']}\n–§–∞–º–∏–ª–∏—è - {user_data['profile_surname']}\n–û—Ç—á–µ—Å—Ç–≤–æ - {user_data['profile_patronymic']}\n–ì–æ—Ä–æ–¥ - {user_data['profile_city']}"
	await message.answer(f'–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–£–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–µ—Ä–Ω–æ: \n{all_info}',reply_markup=menu)
	await CreateProfileTeacher.next()

@dp.message_handler(state=CreateProfileTeacher.finish_)
async def create_profile_finish(message: types.Message, state: FSMContext):
	if message.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ‚ùå':
		await state.finish()
		await teacher_registration(message)
	elif message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await start(message)
	else:
		user_data = await state.get_data()
		db.add_user(user_data['profile_name'], user_data['profile_surname'], 
				user_data['profile_city'], None, message.from_user.id, None, True, True, user_data['profile_patronymic'])
	
		await state.finish()
		await message.answer('–ü—Ä–µ–∫–∞—Ä—Å–Ω–æ!\n–í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n')
		await profile(message)

@dp.message_handler(commands=['profile'],state='*')
async def profile(message: types.Message):
	try:
		if not db.user_type(message.from_user.id):
			now = date.today()
			ct = date(2022,6,16)
			final = str(ct - now)

			button_dnevnik = KeyboardButton('–î–Ω–µ–≤–Ω–∏–∫üóì') 
			button_timer = KeyboardButton(f'–î–æ –¶–¢ - {final.split(" ")[0]} –¥–Ω—è')

			menu = ReplyKeyboardMarkup()
			menu.add(button_dnevnik, button_timer)
			await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {db.get_all_info_user(message.from_user.id)[1]}!\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç {config.NAME_PROJECT}\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏, –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ',reply_markup=menu)
		elif db.user_type(message.from_user.id):
			button_school = KeyboardButton('–®–∫–æ–ª–∞üè´') 
			button_marks = KeyboardButton('–û—Ü–µ–Ω–∫–∏üìö')
			button_homework = KeyboardButton('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏—èüìù')
			button_attendance = KeyboardButton('–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—åüóÉ')
			button_timetable = KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì')
			button_communication = KeyboardButton('–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—èüó£')

			menu = ReplyKeyboardMarkup()
			menu.add(button_school, button_marks, button_homework, button_attendance, button_timetable, button_communication)

			await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {db.get_all_info_user(message.from_user.id)[1]} {db.get_all_info_user(message.from_user.id)[9]}!\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç {config.NAME_PROJECT}\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ü–µ–Ω–∫–∏ —É—á–µ–Ω–∏–∫–∞–º, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"
				,reply_markup=menu)
		else:
			await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')
	except IndexError as e:
		print(e)
		await message.answer('–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é')

@dp.message_handler(lambda message: message.text == '–®–∫–æ–ª–∞üè´', state='*')
async def schools(message: types.Message):
	if db.user_type(message.from_user.id):
		if db.get_all_info_user(message.from_user.id)[4] == None:
			button_choose_school = KeyboardButton('–í—ã–±—Ä–∞—Ç—å —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ')
			button_add_school = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —à–∫–æ–ª—É‚úÖ')
			button_exit = KeyboardButton('–í—ã–π—Ç–∏')

			menu = ReplyKeyboardMarkup(one_time_keyboard=True)
			menu.add(button_add_school, button_choose_school,button_exit)

			await message.answer('–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É',reply_markup=menu)
		else: 
			button_choose_class = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∞—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ')
			button_add_class = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å‚úÖ')
			button_exit = KeyboardButton('–í—ã–π—Ç–∏')

			menu = ReplyKeyboardMarkup(one_time_keyboard=True)
			menu.add(button_add_class, button_choose_class,button_exit)

			await message.answer('–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å',reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

def check_members_class(user_id, class_id):
	all_members_class = ''
	all_members_class_db = db.get_all_member_class(db.get_all_info_user(user_id)[4], class_id)
	for count,members in enumerate(all_members_class_db):
		member = [str(i) for i in members]
		all_members_class += f'{count + 1} | {member[2] + " " + member[1]}\n'

	return [all_members_class, all_members_class_db]

def check_all_class(user_id):
	all_class = ''
	for classes in db.get_all_class(db.get_all_info_user(user_id)[4]):
		classes = [str(i) for i in classes]
		all_class += f'{classes[0]} | {classes[1] + classes[2]}\n'

	return all_class

class CreateSchool(StatesGroup):
	name = State()

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —à–∫–æ–ª—É‚úÖ', state='*')
async def add_school(message: types.Message):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	elif db.user_type(message.from_user.id):
		if db.get_all_info_user(message.from_user.id)[4] == None:
			await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã: ')
			await CreateSchool.name.set()
		else:
			await message.answer('–£ –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —à–∫–æ–ª–∞')
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=CreateSchool.name)
async def name_school(message: types.Message, state: FSMContext):
	await state.update_data(name=message.text)
	user_data = await state.get_data()
	count_schools = db.get_count_schools()

	db.add_school(user_data['name'],db.get_all_info_user(message.from_user.id)[3])

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–í–∞—à–∞ —à–∫–æ–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ')
	db.edit_school_id(message.from_user.id, count_schools + 1)
	await state.finish()
	await schools(message)

class ChooseSchool(StatesGroup):
	id_ = State()

@dp.message_handler(lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å —à–∫–æ–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ', state='*')
async def choose_school(message: types.Message):
	if db.user_type(message.from_user.id):
		if db.get_all_info_user(message.from_user.id)[4] == None:
			all_schools = ''
			for school in db.get_all_schools(db.get_all_info_user(message.from_user.id)[3]):
				school = [str(i) for i in school]
				all_schools += ' | '.join(school)
				all_schools += '\n'
			if all_schools == '':
				await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —à–∫–æ–ª')
				await schools(message)
			else:
				await message.answer(f'–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —à–∫–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞\n\n{all_schools}')
				await ChooseSchool.id_.set()
		else:
			await message.answer('–£ –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —à–∫–æ–ª–∞')
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=ChooseSchool.id_)
async def id_school(message: types.Message, state: FSMContext):
	await state.update_data(id=message.text)
	user_data = await state.get_data()

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–í–∞—à–∞ —à–∫–æ–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞‚úÖ')
	db.edit_school_id(message.from_user.id, int(user_data['id']))
	await state.finish()
	await schools(message)

class CreateClass(StatesGroup):
	number = State()
	title = State()

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å‚úÖ', state='*')
async def add_class(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞: ')
		await CreateClass.number.set()	
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=CreateClass.number)
async def number_class(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		try:
			await state.update_data(number=int(message.text))

			await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞: ')
			await CreateClass.next()
		except ValueError:
			await message.answer('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É')
			await state.finish()
			await add_class(message)

@dp.message_handler(state=CreateClass.title)
async def title_class(message: types.Message, state: FSMContext):
	await state.update_data(title=message.text)
	user_data = await state.get_data()

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–ö–ª–∞—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω')
	db.add_class(user_data['title'], db.get_all_info_user(message.from_user.id)[4], user_data['number'])
	await state.finish()

class ChooseClass(StatesGroup):
	id_class = State()
	id_member = State()

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–ª–∞—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞üìÇ', state='*')
async def choose_class(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer(f'<b><i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:</i></b> \n\n{check_all_class(message.from_user.id)}')
		await ChooseClass.id_class.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=ChooseClass.id_class)
async def choose_id_class(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)

	await state.update_data(id_class=int(message.text))
	user_data = await state.get_data()

	all_members_class, all_members_class_db = check_members_class(message.from_user.id, user_data['id_class'])

	if len(all_members_class_db) > 0:
		await message.answer(f'<b><i>–£—á–µ–Ω–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞</i></b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ - {len(all_members_class_db)}\n\n{all_members_class}')
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–≤—à–µ–≥–æ –≤–∞—Å —É—á–µ–Ω–∏–∫–∞:')

		await ChooseClass.next()
	else:
		await message.answer('–í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç—É —É—á–µ–Ω–∏–∫–æ–≤')
		await state.finish()
		await choose_class(message)

@dp.message_handler(state=ChooseClass.id_member)
async def choose_id_member(message: types.Message, state: FSMContext):
	try:
		if message.text == '–í—ã–π—Ç–∏':
			await exit(message,state)
		else:
			await state.update_data(id_member=int(message.text))
			user_data = await state.get_data()
			
			info_user = db.get_all_info_user(db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])[user_data['id_member'] - 1][5])

			await message.answer(f'–ò–º—è - {info_user[1]}\n–§–∞–º–∏–ª–∏—è - {info_user[2]}')
	except IndexError:
		await message.answer('–£—á–µ–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ')

@dp.message_handler(lambda message: message.text == '–û—Ü–µ–Ω–∫–∏üìö', state='*')
async def marks_menu(message: types.Message):
	if db.user_type(message.from_user.id):
		if db.get_all_info_user(message.from_user.id)[4] == None:
			await message.answer('–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —à–∫–æ–ª–∞')
		else: 
			button_add_mark = KeyboardButton('–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏')
			button_check_mark = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏')
			button_exit = KeyboardButton('–í—ã–π—Ç–∏')

			menu = ReplyKeyboardMarkup(one_time_keyboard=True)
			menu.add(button_add_mark, button_check_mark,button_exit)

			await message.answer('–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫–∏',reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

class AddMark(StatesGroup):
	id_class = State()
	subject = State()
	date = State()
	mark = State()

@dp.message_handler(lambda message: message.text == '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏', state='*')
async def add_marks(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer(f'<b><i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:</i></b> \n\n{check_all_class(message.from_user.id)}')
		await AddMark.id_class.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=AddMark.id_class)
async def choose_subject(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		await state.update_data(id_class=int(message.text))
		user_data = await state.get_data()

		all_subjects = ''

		for id_subject, subject in enumerate(db.get_all_subjects(db.get_class(user_data['id_class'])[3])):
			all_subjects += f'{id_subject + 1} | {subject[0]}\n'

		await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:\n{all_subjects}')
		await AddMark.next()

@dp.message_handler(state=AddMark.subject)
async def choose_id_class_marks(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		await state.update_data(subject_id=int(message.text))
		user_data = await state.get_data()

		all_members_class, all_members_class_db = check_members_class(message.from_user.id, user_data['id_class'])
		
		if len(all_members_class_db) > 0:
			await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –∏ –µ–≥–æ –æ—Ü–µ–Ω–∫—É\n–ü—Ä–∏–º–µ—Ä: 3 - 7 - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∂–µ–ª–∞–Ω–∏—é (–≥–¥–µ 3 —ç—Ç–æ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞, –∞ 7 —ç—Ç–æ –æ—Ü–µ–Ω–∫–∞)\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ç–æ —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ —É—á–µ–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É\n–ü—Ä–∏–º–µ—Ä:\n1 - 9\n2 - 7')
			await message.answer(f'<b><i>–£—á–µ–Ω–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞</i></b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ - {len(all_members_class_db)}\n\n{all_members_class}')

			await AddMark.next()
		else:
			await message.answer('–í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç—É —É—á–µ–Ω–∏–∫–æ–≤')
			await state.finish()
			await marks_menu(message)

@dp.message_handler(state=AddMark.date)
async def choose_date_marks(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		await state.update_data(marks=message.text)
		user_data = await state.get_data()

		button_today = KeyboardButton('–°–µ–≥–æ–¥–Ω—è')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_today)

		await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫–∏\n–ü—Ä–∏–º–µ—Ä: 26.01.2022',reply_markup=menu)
		
		await AddMark.next()

@dp.message_handler(state=AddMark.mark)
async def add_marks(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		try:
			await state.update_data(date=message.text)
			user_data = await state.get_data()

			subject = db.get_all_subjects(db.get_class(user_data['id_class'])[3])[user_data['subject_id'] - 1][0]
			
			for mark in user_data['marks'].split('\n'):
				id_user = int(mark.split('-')[0].replace(' ',''))
				mark_user = int(mark.split('-')[1].replace(' ',''))
				if user_data['date'].lower() == '—Å–µ–≥–æ–¥–Ω—è':
					date_mark = datetime.strptime(str(datetime.now()).split(' ')[0],'%Y-%m-%d')
				else:
					date_mark = datetime.strptime(user_data['date'],'%d.%m.%Y')


				if len(mark.split('-')) == 3:
					comment = mark.split('-')[2][1::]
				else:
					comment = None

				telegram_id_user = db.get_all_info_user(db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])[id_user - 1][5])[5]
				try:
					await bot.send_message(telegram_id_user,f'{db.get_all_info_user(message.from_user.id)[1]} {db.get_all_info_user(message.from_user.id)[9]} –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º {mark_user} –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}')
				except Exception:
					pass

				db.add_mark(subject=subject, mark=mark_user, date=date_mark, telegram_id=telegram_id_user, comment=comment)
				db.update_rating(sys_func.rating_formula(db.get_impact_user(telegram_id_user)[0],db.get_all_marks_student_leaderboard(telegram_id_user)[0][0]), telegram_id_user)


			await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–û—Ü–µ–Ω–∫–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã')
			await state.finish()
			await marks_menu(message)
		except Exception as e:
			print(e)
			await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
			await state.finish()
			await marks_menu(message)

class CheckMark(StatesGroup):
	id_class = State()
	subject = State()
	check_mark = State()

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ü–µ–Ω–∫–∏', state='*')
async def check_marks(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer(f'<b><i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:</i></b> \n\n{check_all_class(message.from_user.id)}')
		await CheckMark.id_class.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=CheckMark.id_class)
async def choose_subject_check_marks(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		await state.update_data(id_class=int(message.text))
		user_data = await state.get_data()

		all_subjects = ''

		for id_subject, subject in enumerate(db.get_all_subjects(db.get_class(user_data['id_class'])[3])):
			all_subjects += f'{id_subject + 1} | {subject[0]}\n'

		await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:\n{all_subjects}')
		await CheckMark.next()

@dp.message_handler(state=CheckMark.subject)
async def choose_id_class_marks(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		await state.update_data(subject_id=int(message.text))
		user_data = await state.get_data()

		all_members_class, all_members_class_db = check_members_class(message.from_user.id, user_data['id_class'])
		
		if len(all_members_class_db) > 0:
			await message.answer(f'<b><i>–£—á–µ–Ω–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞</i></b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ - {len(all_members_class_db)}\n\n{all_members_class}')
			await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –æ—Ü–µ–Ω–∫–∏')

			await CheckMark.next()
		else:
			await message.answer('–í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç—É —É—á–µ–Ω–∏–∫–æ–≤')
			await state.finish()
			await marks_menu(message)

@dp.message_handler(state=CheckMark.check_mark)
async def check_marks(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await exit(message,state)
	else:
		try:
			await state.update_data(user_id=int(message.text))
			user_data = await state.get_data()

			subject = db.get_all_subjects(db.get_class(user_data['id_class'])[3])[user_data['subject_id'] - 1][0]
			
			info_user = db.get_all_info_user(db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])[user_data['user_id'] - 1][5])

			header = '–î–∞—Ç–∞' + ' ' * 10 + '–û—Ü–µ–Ω–∫–∞'
			all_marks = ''
			if not len(db.get_all_marks_student(subject, info_user[5])):
				await message.answer(f'–£ {info_user[2]} {info_user[1]} –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É')
				await marks_menu(message)
			else:
				for mark in db.get_all_marks_student(subject, info_user[5]):
					date = datetime.strptime(mark[2], "%Y-%m-%d %H:%M:%S")
					

					comment = f" | {mark[4]}" if mark[4] else ''
					all_marks += f"{date.strftime('%d.%m.%y')} | {mark[1]} {comment}\n"

				await message.answer(f'–û—Ü–µ–Ω–∫–∏ {info_user[2]} {info_user[1]}:\n{header}\n{all_marks}')
				await marks_menu(message)
		except Exception as e:
			print(e)
			await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
			await state.finish()
			await marks_menu(message)

@dp.message_handler(lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì', state='*')
async def timetable_menu(message: types.Message):
	if db.user_type(message.from_user.id):
		button_call_timetable = KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤')
		button_education_timetable = KeyboardButton('–£—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_call_timetable, button_education_timetable,button_exit)

		await message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –∏ —É—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüóì',reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤', state='*')
async def call_timetable(message: types.Message):
	await message.answer('1 —Å–º–µ–Ω–∞\n\n1 —É—Ä–æ–∫ | 08:00 - 08:40\n2 —É—Ä–æ–∫ | 08:55 - 08:40\n3 —É—Ä–æ–∫ | 09:50 - 10:30\n4 —É—Ä–æ–∫ | 10:45 - 11:25\n5 —É—Ä–æ–∫ | 11:40 - 12:20\n6 —É—Ä–æ–∫ | 12:30 - 13:10')
	await message.answer('2 —Å–º–µ–Ω–∞\n\n1 —É—Ä–æ–∫ | 14:00 - 14:40\n2 —É—Ä–æ–∫ | 15:00 - 15:40\n3 —É—Ä–æ–∫ | 16:00 - 16:40\n4 —É—Ä–æ–∫ | 16:50 - 17:30\n5 —É—Ä–æ–∫ | 17:40 - 18:20\n6 —É—Ä–æ–∫ | 18:30 - 19:10')

# TODO TODAY
@dp.message_handler(lambda message: message.text == '–£—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', state='*')
async def education_timetable_menu(message: types.Message):
	if db.user_type(message.from_user.id): 
		button_add_timetable = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
		button_edit_timetable = KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
		button_check_timetable = KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_add_timetable, button_edit_timetable, button_check_timetable, button_exit)

		await message.answer('–£—á–µ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–î–æ–±–∞–≤—å, –∏–∑–º–µ–Ω–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏',reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

class AddTimetable(StatesGroup):
	class_title = State()
	timetable = State()

@dp.message_handler(lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', state='*')
async def add_timetable(message: types.Message):
	if db.user_type(message.from_user.id): 
		await message.answer('–í–≤–µ–¥–∏ –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
		await AddTimetable.class_title.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=AddTimetable.class_title)
async def add_timetable_class(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await education_timetable_menu(message)
	else:
		await state.update_data(class_title=message.text)
		await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤\n–ü—Ä–∏–º–µ—Ä:\n\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n...\n...\n–í—Ç–æ—Ä–Ω–∏–∫\n...\n...')
		await AddTimetable.next()

@dp.message_handler(state=AddTimetable.timetable)
async def add_timetable_days(message: types.Message, state: FSMContext):
	await state.update_data(days=message.text)
	user_data = await state.get_data()

	days_rus = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫','–í—Ç–æ—Ä–Ω–∏–∫','–°—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä–≥','–ü—è—Ç–Ω–∏—Ü–∞','–°—É–±–±–æ—Ç–∞']
	subjects = db.get_all_title_subjects()
	try:
		days_timetable = []
		circle = -1
		for el in user_data['days'].split('\n'):
			el = el.strip(' ')
			if el in days_rus:
				circle += 1
				days_timetable.append([])
			elif (el,) in subjects:
				days_timetable[circle].append(el)
			else:
				await message.answer('–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
				await state.finish()
				await add_timetable(message)
				break

		school_id = db.get_all_info_user(message.from_user.id)[4]
		class_title = int(user_data['class_title'][:-1])
		class_id = db.get_class_id(user_data['class_title'][-1], class_title, school_id)[0][0]

		db.add_timetable(school_id, class_id, '\n'.join(days_timetable[0]),'\n'.join(days_timetable[1]),'\n'.join(days_timetable[2]),'\n'.join(days_timetable[3]),'\n'.join(days_timetable[4]),'\n'.join(days_timetable[5]))
		await message.answer('–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
		await state.finish()
		await education_timetable_menu(message)
	except Exception as e:
		print(e)
		await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
		await state.finish()
		await education_timetable_menu(message)

class CheckTimetable(StatesGroup):
	class_title = State()
	action = State()

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', state='*')
async def check_timetable(message: types.Message):
	if db.user_type(message.from_user.id): 
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
		await CheckTimetable.class_title.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=CheckTimetable.class_title)
async def view_timetable(message: types.Message, state: FSMContext):
	try:
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_exit)

		await state.update_data(class_title=message.text)
		user_data = await state.get_data()

		week_days = ("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")
		now = datetime.now()
		day = week_days[now.weekday()] 
		start_week = datetime.now() - timedelta(now.weekday())
		end_week = start_week + timedelta(5)
		month = datetime.now().strftime('%B')
		year = str(datetime.now().year)[2:]

		school_id = db.get_all_info_user(message.from_user.id)[4]
		class_id = db.get_class_id(user_data['class_title'][-1], int(user_data['class_title'][:-1]), school_id)[0][0]

		timetable = db.get_timetable(school_id, class_id)
		timetable = list(map(lambda item: item.split('\n'),timetable[2::]))
		timetable = list(map(lambda item: sys_func.reduce_subjects_titles(item), timetable))

		pic.draw_timetable(timetable,year,month,start_week.day,end_week.day)

		photo = open('static.png', 'rb')
		await bot.send_photo(message.from_user.id, photo)


		await message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',reply_markup=menu)
		await CheckTimetable.next()
	except IndexError as e:
		print(e)
		await message.answer('–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		await state.finish()
		await check_timetable(message)
	except ValueError as e:
		print(e)
		await message.answer('–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		await state.finish()
		await check_timetable(message)

@dp.message_handler(state=CheckTimetable.action)
async def timetable_action(message: types.Message, state: FSMContext):
	await state.finish()
	await start(message)

@dp.message_handler(lambda message: message.text == '–î–Ω–µ–≤–Ω–∏–∫üóì', state='*')
async def dnevnik(message: types.Message):
	if not db.date_check_exists(message.from_user.id):
		db.add_date_check(date(datetime.now().year, datetime.now().month, datetime.now().day), message.from_user.id)

	button_back = KeyboardButton('–ù–∞–∑–∞–¥‚óÄÔ∏è')
	button_forward = KeyboardButton('–í–ø–µ—Ä—ë–¥‚ñ∂Ô∏è')
	button_exit = KeyboardButton('–í—ã–π—Ç–∏')

	menu = ReplyKeyboardMarkup()
	menu.add(button_back, button_forward, button_exit)	

	school_id = db.get_all_info_user(message.from_user.id)[4]
	class_id = db.get_all_info_user(message.from_user.id)[6]

	week_days = ("Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday")
	now = datetime.strptime(db.check_date(message.from_user.id)[0], "%Y-%m-%d")
	day = week_days[now.weekday()] 
	start_week = now - timedelta(now.weekday())
	end_week = start_week + timedelta(5)
	month = now.strftime('%B')
	year = str(now.year)[2:]
	

	try:
		marks = db.get_marks_order_date(message.from_user.id, start_week, end_week)
	except Exception:
		marks = []

	final_marks = []
	for mark in marks:
		try:
			mark_day = datetime.strptime(mark[1], "%Y-%m-%d %H:%M:%S").weekday()
			subject_number = db.get_timetable(school_id, class_id)[1 + mark_day + 1].split('\n').index(mark[2]) + 1
			final_marks.append([mark_day,subject_number,mark[0]])
		except Exception as e:
			print(e)

	try:
		homework = db.get_homework_order_date(start_week - timedelta(7), end_week - timedelta(7))
	except Exception as e:
		homework = []

	final_homework = []
	for task in homework:
		try:
			task_day = datetime.strptime(task[1], "%Y-%m-%d %H:%M:%S").weekday()
			subject_number = db.get_timetable(school_id, class_id)[1 + task_day + 1].split('\n').index(task[0]) + 1
			homework = task[2]
			final_homework.append([task_day, subject_number, homework])
		except Exception as e:
			print(e)

	timetable = db.get_timetable(school_id, class_id)		
	timetable = list(map(lambda item: item.split('\n'),timetable[2::]))
	timetable = list(map(lambda item: sys_func.reduce_subjects_titles(item), timetable))

	pic.draw_timetable_student(timetable,year,month,start_week.day,end_week.day,final_marks,final_homework)

	photo = open('student.png', 'rb')
	await bot.send_photo(message.from_user.id, photo)


	await message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',reply_markup=menu)

@dp.message_handler(lambda message: message.text == '–í–ø–µ—Ä—ë–¥‚ñ∂Ô∏è', state='*')
async def forward(message: types.Message):
	now = datetime.strptime(db.check_date(message.from_user.id)[0], "%Y-%m-%d")
	db.add_date_check(date(now.year, now.month, now.day) + timedelta(7), message.from_user.id)
	await dnevnik(message)

@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥‚óÄÔ∏è', state='*')
async def forward(message: types.Message):
	now = datetime.strptime(db.check_date(message.from_user.id)[0], "%Y-%m-%d")
	db.add_date_check(date(now.year, now.month, now.day) - timedelta(7), message.from_user.id)
	await dnevnik(message)




class EditTimetable(StatesGroup):
	class_title = State()
	day = State()
	timetable = State()

@dp.message_handler(lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', state='*')
async def edit_timetable(message: types.Message):
	if db.user_type(message.from_user.id): 
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è')
		await EditTimetable.class_title.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=EditTimetable.class_title)
async def edit_timetable_day(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await education_timetable_menu(message)
	else:
		await state.update_data(class_title=message.text)
		await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
		await EditTimetable.next()

@dp.message_handler(state=EditTimetable.day)
async def edit_timetable_timetable(message: types.Message, state: FSMContext):
	await state.update_data(day=message.text)
	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è')
	await EditTimetable.next()

@dp.message_handler(state=EditTimetable.timetable)
async def edit_timetable_finish(message: types.Message, state: FSMContext):
	await state.update_data(timetable=message.text)
	user_data = await state.get_data()
	
	try:
		school_id = db.get_all_info_user(message.from_user.id)[4]
		class_id = db.get_class_id(user_data['class_title'][-1], int(user_data['class_title'][:-1]), school_id)[0][0]

		db.edit_timetable(school_id, class_id, sys_func.get_eng_day(user_data['day']),user_data['timetable'])
		await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!')
		await state.finish()
		await education_timetable_menu(message)


	except Exception:
		await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
		await state.finish()
		await education_timetable_menu(message)

class Attendance(StatesGroup):
	class_title = State()
	subject = State()
	final = State()

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—åüóÉ', state='*')
async def attendance(message: types.Message):
	if db.user_type(message.from_user.id):
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_exit)

		await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å —á—Ç–æ –±—ã –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å',reply_markup=menu)
		await Attendance.class_title.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=Attendance.class_title)
async def attendance_class_title(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await start(message)
	else:
		await state.update_data(class_title=message.text)
		user_data = await state.get_data()
		all_subjects = ''

		for id_subject, subject in enumerate(db.get_all_subjects(int(user_data['class_title'][:-1]))):
			all_subjects += f'{id_subject + 1} | {subject[0]}\n'

		await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:\n{all_subjects}')
		await Attendance.next()

@dp.message_handler(state=Attendance.subject)
async def attendance_students(message: types.Message, state: FSMContext):
	try:
		if message.text == '–í—ã–π—Ç–∏':
			await state.finish()
			await start(message)
		else:
			await state.update_data(subject=int(message.text))
			user_data = await state.get_data()

			id_class = db.get_class_id(user_data['class_title'][-1], int(user_data['class_title'][:-1]), db.get_all_info_user(message.from_user.id)[4])[0][0]
			all_members_class, all_members_class_db = check_members_class(message.from_user.id, id_class)

			if len(all_members_class_db) > 0:
				await message.answer(f'<b><i>–£—á–µ–Ω–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞</i></b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ - {len(all_members_class_db)}\n\n{all_members_class}')
				await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —É—á–µ–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏\n–ü—Ä–∏–º–µ—Ä:\n3\n5')

				await Attendance.next()
			else:
				await message.answer('–í —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤')
				await state.finish()
				await start(message)
	except Exception:
		await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
		await state.finish()
		await start(message)

@dp.message_handler(state=Attendance.final)
async def attendance_final(message: types.Message, state: FSMContext):
	try:
		await state.update_data(id_students=message.text)
		user_data = await state.get_data()

		students = list(map(int,user_data['id_students'].split('\n')))
		subject = db.get_all_subjects(int(user_data['class_title'][:-1]))[user_data['subject'] - 1][0]
		class_id = db.get_class_id(user_data['class_title'][-1], int(user_data['class_title'][:-1]), db.get_all_info_user(message.from_user.id)[4])[0][0]
		for student in students:
			telegram_id_user = db.get_all_info_user(db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], class_id)[student - 1][5])[5]
			await bot.send_message(telegram_id_user,f'{db.get_all_info_user(message.from_user.id)[1]} {db.get_all_info_user(message.from_user.id)[9]} –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ø—Ä–æ–ø—É—Å–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}')
			db.add_attendance(subject, telegram_id_user)
		
		await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!')
		await state.finish()
		await start(message)
	except Exception:
		await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
		await state.finish()
		await start(message)

class Homework(StatesGroup):
	class_id = State()
	subject = State()
	final = State()

@dp.message_handler(lambda message: message.text == '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏—èüìù', state='*')
async def homework_menu(message: types.Message):
	if db.user_type(message.from_user.id):
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_exit)

		await message.answer(f'<b><i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ —á—Ç–æ –±—ã –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</i></b> \n\n{check_all_class(message.from_user.id)}',reply_markup=menu)
		await Homework.class_id.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(state=Homework.class_id)
async def homework_class_id(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await start(message)
	else:
		try:
			await state.update_data(class_id=int(message.text))
			user_data = await state.get_data()

			all_subjects = ''
			all_members_class, all_members_class_db = check_members_class(message.from_user.id, user_data['class_id'])

			for id_subject, subject in enumerate(db.get_all_subjects(db.get_class(user_data['class_id'])[3])):
				all_subjects += f'{id_subject + 1} | {subject[0]}\n'

			await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:\n{all_subjects}')
			await Homework.next()
		except IndexError:
			await message.answer('–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
			await state.finish()
			await homework_menu(message)
		except Exception as e:
			print(e)
			await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
			await state.finish()
			await start(message)

@dp.message_handler(state=Homework.subject)
async def homework_subject(message: types.Message, state: FSMContext):
	if message.text == '–í—ã–π—Ç–∏':
		await state.finish()
		await start(message)
	else:
		try:
			await state.update_data(subject=int(message.text))

			await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n–ü—Ä–∏–º–µ—Ä: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 2.33-2.40')
			await Homework.next()
		except Exception:
			await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
			await state.finish()
			await start(message)

@dp.message_handler(state=Homework.final)
async def homework_final(message: types.Message, state: FSMContext):
	try:
		await state.update_data(homework=message.text)
		user_data = await state.get_data()

		subject = db.get_all_subjects(db.get_class(user_data['class_id'])[3])[user_data['subject'] - 1][0]

		db.add_homework(subject, user_data['homework'])

		await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!')
		await state.finish()
		await start(message)
	except Exception:
		await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
		await state.finish()
		await start(message)

@dp.message_handler(lambda message: message.text.startswith('–î–æ –¶–¢ - '), state='*')
async def ct(message: types.Message):
	now = date.today()
	ct = date(2022,6,16)
	final = str(ct - now)

	await message.answer(f'''
–î–æ –¶–¢ - {final.split(" ")[0]} –¥–Ω—è

–ì—Ä–∞—Ñ–∏–∫ –¶–¢ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–Ω–∏:

<b>16 –∏—é–Ω—è</b> ‚Äì –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫;
<b>18 –∏ 19 –∏—é–Ω—è</b> ‚Äì —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫;
<b>21 –∏—é–Ω—è</b> ‚Äì –æ–±—â–µ—Å—Ç–≤–æ–≤–µ–¥–µ–Ω–∏–µ;
<b>23 –∏ 24 –∏—é–Ω—è</b> ‚Äì –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞;
<b>26 –∏—é–Ω—è</b> ‚Äì –±–∏–æ–ª–æ–≥–∏—è;
<b>28 –∏—é–Ω—è</b> ‚Äì –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –Ω–µ–º–µ—Ü–∫–∏–π, —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π);
<b>30</b> –∏—é–Ω—è ‚Äì —Ö–∏–º–∏—è;
<b>2 –∏—é–ª—è</b> ‚Äì —Ñ–∏–∑–∏–∫–∞;
<b>4 –∏—é–ª—è</b> ‚Äì –∏—Å—Ç–æ—Ä–∏—è –ë–µ–ª–∞—Ä—É—Å–∏;
<b>6 –∏—é–ª—è</b> ‚Äì –≥–µ–æ–≥—Ä–∞—Ñ–∏—è;
<b>8 –∏—é–ª—è</b> ‚Äì –≤—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (–Ω–æ–≤–µ–π—à–µ–µ –≤—Ä–µ–º—è).

–ù–∞—á–∞–ª–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¶–¢-2022 –≤ 11-00
''') 

@dp.message_handler(lambda message: message.text == '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—èüó£', state='*')
async def communication_menu(message: types.Message):
	if db.user_type(message.from_user.id):
		button_events = KeyboardButton('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
		button_communication = KeyboardButton('–°–æ–æ–±—â–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ')
		button_inform_test = KeyboardButton('–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π')
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_events, button_communication, button_inform_test, button_exit)

		await message.answer('–û–±—â–∞–π—Ç–µ—Å—å —Å–æ —Å–≤–æ–∏–º –∫–ª–∞—Å—Å–æ–º –∏–ª–∏ —Å–æ –≤—Å–µ–π —à–∫–æ–ª–æ–π —Å—Ä–∞–∑—É!',reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

@dp.message_handler(lambda message: message.text == '–°–æ–æ–±—â–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ', state='*')
async def inform_menu(message: types.Message):
	if db.user_type(message.from_user.id):
		button_inform_class = KeyboardButton('–°–æ–æ–±—â–∏—Ç—å –∫–ª–∞—Å—Å—É')
		button_inform_school = KeyboardButton('–°–æ–æ–±—â–∏—Ç—å —à–∫–æ–ª–µ')
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_inform_class, button_inform_school, button_exit)

		await message.answer('–°–æ–æ–±—â–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ –∫–ª–∞—Å—Å—É –∏–ª–∏ –≤—Å–µ–π —à–∫–æ–ª–µ', reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')

class InformSchool(StatesGroup):
	message = State()

@dp.message_handler(lambda message: message.text == '–°–æ–æ–±—â–∏—Ç—å —à–∫–æ–ª–µ', state='*')
async def inform_school(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —à–∫–æ–ª—ã\n<b>P.S –ù–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π :)</b>')
		await InformSchool.message.set()

	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é')


@dp.message_handler(state=InformSchool.message)
async def inform_school_message(message: types.Message, state: FSMContext):
	await state.update_data(message_text=message.text)
	user_data = await state.get_data()

	for user in db.get_all_student_school(db.get_all_info_user(message.from_user.id)[4]):
		try:
			await bot.send_message(user[5], f'–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {db.get_all_info_user(message.from_user.id)[1]}–∞ {db.get_all_info_user(message.from_user.id)[9]}–∞\n{user_data["message_text"]}')
		except ChatNotFound:
			pass

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
	await state.finish()
	await start(message)

class InformClass(StatesGroup):
	class_ = State()
	message = State()

@dp.message_handler(lambda message: message.text == '–°–æ–æ–±—â–∏—Ç—å –∫–ª–∞—Å—Å—É', state='*')
async def inform_class(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer(f'<b><i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:</i></b> \n\n{check_all_class(message.from_user.id)}')
		await InformClass.class_.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é') 

@dp.message_handler(state=InformClass.class_)
async def inform_class_id(message: types.Message, state: FSMContext):
	await state.update_data(id_class=int(message.text))
	await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞')
	await InformClass.next()

@dp.message_handler(state=InformClass.message)
async def inform_class_message(message: types.Message, state: FSMContext):
	await state.update_data(message_text=message.text)
	user_data = await state.get_data()

	all_users_class = db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])

	for user in all_users_class:
		try:
			await bot.send_message(user[5], f'–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {db.get_all_info_user(message.from_user.id)[1]}–∞ {db.get_all_info_user(message.from_user.id)[9]}–∞\n{user_data["message_text"]}')
		except ChatNotFound:
			pass

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
	await state.finish()
	await start(message)

class InformTest(StatesGroup):
	class_id = State()
	subject = State()
	date = State()

@dp.message_handler(lambda message: message.text == '–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π', state='*')
async def inform_test(message: types.Message):
	if db.user_type(message.from_user.id):
		await message.answer(f'<b><i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞:</i></b> \n\n{check_all_class(message.from_user.id)}')
		await InformTest.class_id.set()
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é') 	

@dp.message_handler(state=InformTest.class_id)
async def inform_test_class_id(message: types.Message, state: FSMContext):
	await state.update_data(id_class=int(message.text))
	user_data = await state.get_data()

	class_id = db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])[0][6]

	all_subjects = ''
	for id_subject, subject in enumerate(db.get_all_subjects(db.get_class(class_id)[3])):
		all_subjects += f'{id_subject + 1} | {subject[0]}\n'

	await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞:\n{all_subjects}')
	await InformTest.next()

@dp.message_handler(state=InformTest.subject)
async def inform_test_subject(message: types.Message, state: FSMContext):
	await state.update_data(id_subject=int(message.text))

	await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n–ü—Ä–∏–º–µ—Ä - 26.01.2022')
	await InformTest.next()	

@dp.message_handler(state=InformTest.date)
async def inform_test_date(message: types.Message, state: FSMContext):
	await state.update_data(date=message.text)
	user_data = await state.get_data()
	
	class_id = db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], user_data['id_class'])[0][6]
	all_users_class = db.get_all_member_class(db.get_all_info_user(message.from_user.id)[4], class_id)
	subject_title = db.get_all_subjects(db.get_class(class_id)[3])[user_data['id_subject'] - 1][0]

	for user in all_users_class:
		try:
			await bot.send_message(user[5], f'–£—á–∏—Ç–µ–ª—å {db.get_all_info_user(message.from_user.id)[1]} {db.get_all_info_user(message.from_user.id)[9]} –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞–º –æ <b><i>–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ</i></b>\n–û–Ω–∞ –ø—Ä–æ–π–¥—ë—Ç <i>{user_data["date"]}</i> –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject_title}</b>')
		except ChatNotFound as e:
			print(e)

	await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
	await state.finish()	
	await start(message)

@dp.message_handler(lambda message: message.text == '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', state='*')
async def events_menu(message: types.Message):
	if db.user_type(message.from_user.id):
		button_add_event = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
		button_upcoming_events = KeyboardButton('–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
		button_inform_event = KeyboardButton('–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏')
		button_exit = KeyboardButton('–í—ã–π—Ç–∏')

		menu = ReplyKeyboardMarkup(one_time_keyboard=True)
		menu.add(button_add_event, button_upcoming_events, button_inform_event, button_exit)

		message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Å–≤–æ–∏–º —É—á–µ–Ω–∏–∫–∞–º –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ ',reply_markup=menu)
	else:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é') 

@dp.message_handler(commands=['exit'],state='*')
async def exit(message: types.Message, state: FSMContext):
	await state.finish()
	await start(message)

@dp.message_handler(lambda message: message.text == '–í—ã–π—Ç–∏',state='*')
async def exit_text(message: types.Message, state: FSMContext):
	await state.finish()
	await start(message)

@dp.message_handler()
async def any_command(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–º–æ–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'''
	await message.answer('–•–º, –Ω–µ–∑–Ω–∞—é —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å\n–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /help')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
